{"version":3,"sources":["components/Board/Board.jsx","components/Notification/Notification.jsx","App.js","index.js"],"names":["Board","board","className","map","row","rowIndex","key","col","colIndex","Notification","message","App","machineAttemps","personAttemps","Math","round","random","createBoard","isLeftWinner","isBottomLeftWinner","isCenterWinner","isBottomCenterWinner","isRightWinner","isBottomRightWinner","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0KAkBeA,EAhBD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACf,OACE,yBAAKC,UAAU,SACZD,EAAME,KAAI,SAACC,EAAKC,GAAN,OACT,yBAAKH,UAAU,aAAaI,IAAKD,GAC9BD,EAAID,KAAI,SAACI,EAAKC,GAAN,OACP,yBAAKN,UAAU,aAAaI,IAAG,UAAKD,EAAL,YAAiBG,IAC7CD,YCHAE,EAJM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,uBAAGR,UAAU,gBAAgBQ,ICgFvBC,EAzBH,WACV,IAAMV,EA7CY,WAKlB,IAJA,IAAMA,EAAQ,GACVW,EAAiB,EACjBC,EAAgB,EAEXT,EAAM,EAAGA,EAAM,EAAGA,IAAO,CAChCH,EAAMG,GAAO,GACb,IAAK,IAAIG,EAAM,EAAGA,EAAM,EAAGA,IAAO,CAhBf,MAGA,CAJD,IACC,KAIAO,KAAKC,MAAMD,KAAKE,WAgB3BJ,EAAiB,GACnBX,EAAMG,GAAN,sBAAiBH,EAAMG,IAAvB,CArBa,MAsBbQ,GAAkB,GAElBX,EAAMG,GAAN,sBAAiBH,EAAMG,IAAvB,CAzBY,MA4BVS,EAAgB,GAClBZ,EAAMG,GAAN,sBAAiBH,EAAMG,IAAvB,CA7BY,MA8BZS,GAAiB,GAEjBZ,EAAMG,GAAN,sBAAiBH,EAAMG,IAAvB,CA/Ba,OAuCrB,OAFAH,EAAM,GAAK,CAAC,GAAI,GAAI,IAEbA,EAeOgB,GACRC,EAbmB,SAACjB,GAAD,MA1CJ,MA2CpBA,EAAM,GAAG,IA3CW,MA2CcA,EAAM,GAAG,IA3CvB,MA4CpBA,EAAM,GAAG,IA5CW,MA4CcA,EAAM,GAAG,GAWvBkB,CAAmBlB,GAClCmB,EAVqB,SAACnB,GAAD,MA9CN,MA+CrBA,EAAM,GAAG,IA/CY,MA+CaA,EAAM,GAAG,GASpBoB,CAAqBpB,GACtCqB,EARoB,SAACrB,GAAD,MAjDL,MAkDpBA,EAAM,GAAG,IAlDW,MAkDcA,EAAM,GAAG,IAlDvB,MAmDpBA,EAAM,GAAG,IAnDW,MAmDcA,EAAM,GAAG,GAMtBsB,CAAoBtB,GAE1C,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,CAAOD,MAAOA,IACbiB,GACC,kBAAC,EAAD,CAAcR,QAAQ,4DAEvBU,GACC,kBAAC,EAAD,CAAcV,QAAQ,uDAEvBY,GACC,kBAAC,EAAD,CAAcZ,QAAQ,2DAEtBQ,IAAiBE,IAAmBE,GACpC,kBAAC,EAAD,CAAcZ,QAAQ,mCCxE9Bc,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.3254943e.chunk.js","sourcesContent":["import React from 'react';\n\nconst Board = ({ board }) => {\n  return (\n    <div className=\"board\">\n      {board.map((row, rowIndex) => (\n        <div className=\"board__row\" key={rowIndex}>\n          {row.map((col, colIndex) => (\n            <div className=\"board__col\" key={`${rowIndex}-${colIndex}`}>\n              {col}\n            </div>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Board;\n","import React from 'react';\n\nconst Notification = ({ message }) => {\n  return <p className=\"notification\">{message}</p>;\n};\n\nexport default Notification;\n","import React from 'react';\nimport Board from './components/Board/Board';\nimport Notification from './components/Notification/Notification';\n\nconst PERSON_PLAYER = 'O';\nconst MACHINE_PLAYER = 'X';\n\nconst getColumnValue = () => {\n  const columnValues = [PERSON_PLAYER, MACHINE_PLAYER];\n  const randomNumber = Math.round(Math.random());\n\n  return columnValues[randomNumber];\n};\n\nconst createBoard = () => {\n  const board = [];\n  let machineAttemps = 3;\n  let personAttemps = 3;\n\n  for (let row = 0; row < 2; row++) {\n    board[row] = [];\n    for (let col = 0; col < 3; col++) {\n      const player = getColumnValue();\n\n      if (player === MACHINE_PLAYER) {\n        if (machineAttemps > 0) {\n          board[row] = [...board[row], MACHINE_PLAYER];\n          machineAttemps -= 1;\n        } else {\n          board[row] = [...board[row], PERSON_PLAYER];\n        }\n      } else {\n        if (personAttemps > 0) {\n          board[row] = [...board[row], PERSON_PLAYER];\n          personAttemps -= 1;\n        } else {\n          board[row] = [...board[row], MACHINE_PLAYER];\n        }\n      }\n    }\n  }\n\n  board[2] = ['', '', ''];\n\n  return board;\n};\n\nconst isBottomLeftWinner = (board) =>\n  (board[0][0] === MACHINE_PLAYER && board[1][0] === MACHINE_PLAYER) ||\n  (board[0][2] === MACHINE_PLAYER && board[1][1] === MACHINE_PLAYER);\n\nconst isBottomCenterWinner = (board) =>\n  board[0][1] === MACHINE_PLAYER && board[1][1] === MACHINE_PLAYER;\n\nconst isBottomRightWinner = (board) =>\n  (board[0][2] === MACHINE_PLAYER && board[1][2] === MACHINE_PLAYER) ||\n  (board[0][0] === MACHINE_PLAYER && board[1][1] === MACHINE_PLAYER);\n\nconst App = () => {\n  const board = createBoard();\n  const isLeftWinner = isBottomLeftWinner(board);\n  const isCenterWinner = isBottomCenterWinner(board);\n  const isRightWinner = isBottomRightWinner(board);\n\n  return (\n    <div className=\"app\">\n      <Board board={board} />\n      {isLeftWinner && (\n        <Notification message=\"La m치quina gana con la celda de abajo a la izquierda\" />\n      )}\n      {isCenterWinner && (\n        <Notification message=\"La m치quina gana con la celda de abajo al centro\" />\n      )}\n      {isRightWinner && (\n        <Notification message=\"La m치quina gana con la celda de abajo a la derecha\" />\n      )}\n      {!isLeftWinner && !isCenterWinner && !isRightWinner && (\n        <Notification message=\"La m치quina no puede ganar\" />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}